From 2e986322694d950b3c33633c2cb95f5a280cb87f Mon Sep 17 00:00:00 2001
From: Song Wenting <songwenting@phytium.com.cn>
Date: Mon, 17 Jun 2024 19:33:08 +0800
Subject: [PATCH 103/150] net: macb: restart tx after tx used bit read for
 multiqueue

The commit 4298388574da ("net: macb: restart tx after tx used bit read")
introduces the mechanism to restart tx after "TX USED BIT READ"
interrupt is asserted. It fixes the issue for single tx queue
implementations. Since the "TX USED BIT READ" interrupt asserts only
for TX queue 0, it fails to check if there are packets on other software
TX queues to be restarted. In this patch, we check every TX queue status
and restart TX if necessary.

Signed-off-by: Song Wenting <songwenting@phytium.com.cn>
Signed-off-by: Chen Baozi <chenbaozi@phytium.com.cn>
Change-Id: I15aea2ac41302de85b62bb6f9496d22fbee9b1d6
Signed-off-by: Andrew Powers-Holmes <aholmes@omnom.net>
---
 drivers/net/ethernet/cadence/macb_main.c | 15 +++++++++------
 1 file changed, 9 insertions(+), 6 deletions(-)

diff --git a/drivers/net/ethernet/cadence/macb_main.c b/drivers/net/ethernet/cadence/macb_main.c
index 8f61731e4554..6904d84730b1 100644
--- a/drivers/net/ethernet/cadence/macb_main.c
+++ b/drivers/net/ethernet/cadence/macb_main.c
@@ -1899,10 +1899,11 @@ static irqreturn_t gem_wol_interrupt(int irq, void *dev_id)
 
 static irqreturn_t macb_interrupt(int irq, void *dev_id)
 {
-	struct macb_queue *queue = dev_id;
+	struct macb_queue *qq, *queue = dev_id;
 	struct macb *bp = queue->bp;
 	struct net_device *dev = bp->dev;
 	u32 status, ctrl;
+	unsigned int q;
 
 	status = queue_readl(queue, ISR);
 
@@ -1949,11 +1950,13 @@ static irqreturn_t macb_interrupt(int irq, void *dev_id)
 							 MACB_BIT(TXUBR));
 
 			if (status & MACB_BIT(TXUBR)) {
-				queue->txubr_pending = true;
-				wmb(); // ensure softirq can see update
-			}
-
-			if (napi_schedule_prep(&queue->napi_tx)) {
+				for (q = 0, qq = bp->queues; q < bp->num_queues; q++, qq++) {
+					qq->txubr_pending = true;
+					wmb(); // ensure softirq can see update
+					if (napi_schedule_prep(&qq->napi_tx))
+						__napi_schedule(&qq->napi_tx);
+				}
+			} else if (napi_schedule_prep(&queue->napi_tx)) {
 				netdev_vdbg(bp->dev, "scheduling TX softirq\n");
 				__napi_schedule(&queue->napi_tx);
 			}
-- 
2.47.0

