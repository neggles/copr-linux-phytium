From 352085e104127e42bc0a4b5f6edcfb3c4500a90c Mon Sep 17 00:00:00 2001
From: Zhang Yiqun <zhangyiqun@phytium.com.cn>
Date: Mon, 17 Jun 2024 19:33:06 +0800
Subject: [PATCH 077/150] ASoC: phytium: Add phytium machine with px210 DP
 support

This patch is to add support for Phytium machine with px210
Displayport. It can match with a dummy ACPI node PHYT8006
for probing.

Signed-off-by: Zhang Yiqun <zhangyiqun@phytium.com.cn>
Signed-off-by: Chen Baozi <chenbaozi@phytium.com.cn>
Change-Id: I8b28dadb35eeda2c1a42fd30a5a9528ff7a97f12
Signed-off-by: Andrew Powers-Holmes <aholmes@omnom.net>
---
 sound/soc/phytium/Kconfig   |   8 ++
 sound/soc/phytium/Makefile  |   3 +
 sound/soc/phytium/pmdk_dp.c | 224 ++++++++++++++++++++++++++++++++++++
 3 files changed, 235 insertions(+)
 create mode 100644 sound/soc/phytium/pmdk_dp.c

diff --git a/sound/soc/phytium/Kconfig b/sound/soc/phytium/Kconfig
index 15f2801ca3a7..c0621dce1228 100644
--- a/sound/soc/phytium/Kconfig
+++ b/sound/soc/phytium/Kconfig
@@ -22,3 +22,11 @@ config SND_PMDK_ES8336
 	help
 	 Say Y if you want to add Phytium machine support for
 	 ES8336 codecs.
+
+config SND_PMDK_DP
+	tristate "Phytium machine support with DP"
+	depends on I2C && SND_SOC_PHYTIUM_I2S
+	select SND_SOC_HDMI_CODEC
+	help
+	 Say Y if you want to add Phytium machine support for
+	 Displayport.
diff --git a/sound/soc/phytium/Makefile b/sound/soc/phytium/Makefile
index 08851d30e63f..45cd2ed9d420 100644
--- a/sound/soc/phytium/Makefile
+++ b/sound/soc/phytium/Makefile
@@ -9,3 +9,6 @@ obj-$(CONFIG_SND_PMDK_ES8388) += snd-soc-pmdk-es8388.o
 
 snd-soc-pmdk-es8336-objs :=pmdk_es8336.o
 obj-$(CONFIG_SND_PMDK_ES8336) += snd-soc-pmdk-es8336.o
+
+snd-soc-pmdk-dp-objs :=pmdk_dp.o
+obj-$(CONFIG_SND_PMDK_DP) += snd-soc-pmdk-dp.o
diff --git a/sound/soc/phytium/pmdk_dp.c b/sound/soc/phytium/pmdk_dp.c
new file mode 100644
index 000000000000..cdd241a8a981
--- /dev/null
+++ b/sound/soc/phytium/pmdk_dp.c
@@ -0,0 +1,224 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ *  Copyright (c) 2021-2023, Phytium Technology Co., Ltd.
+ */
+
+#include <linux/module.h>
+#include <sound/soc.h>
+#include <sound/pcm_params.h>
+#include <sound/jack.h>
+
+struct pmdk_dp_private {
+	struct snd_soc_jack jack0;
+	struct snd_soc_jack jack1;
+	struct snd_soc_jack jack2;
+};
+
+/* PMDK widgets */
+static const struct snd_soc_dapm_widget pmdk_dp_dapm_widgets[] = {
+	SND_SOC_DAPM_LINE("DP", NULL),
+};
+
+/* PMDK control */
+static const struct snd_kcontrol_new pmdk_controls[] = {
+	SOC_DAPM_PIN_SWITCH("DP"),
+};
+
+/* PMDK connections */
+static const struct snd_soc_dapm_route pmdk_dp_audio_map[] = {
+	{"DP", NULL, "TX"},
+};
+
+static struct snd_soc_jack_pin dp0_pins[] = {
+	{
+		.pin	= "DP/HDMI 0",
+		.mask	= SND_JACK_LINEOUT,
+	},
+};
+
+static struct snd_soc_jack_pin dp1_pins[] = {
+	{
+		.pin	= "DP/HDMI 1",
+		.mask	= SND_JACK_LINEOUT,
+	},
+};
+
+static struct snd_soc_jack_pin dp2_pins[] = {
+	{
+		.pin	= "DP/HDMI 2",
+		.mask	= SND_JACK_LINEOUT,
+	},
+};
+
+#define SMDK_DAI_FMT (SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF | \
+	SND_SOC_DAIFMT_BC_FC)
+
+static int pmdk_dp0_init(struct snd_soc_pcm_runtime *runtime)
+{
+	struct snd_soc_card *card = runtime->card;
+	struct pmdk_dp_private *priv = snd_soc_card_get_drvdata(card);
+	struct snd_soc_component *component = asoc_rtd_to_codec(runtime, 0)->component;
+	int ret;
+
+	ret = snd_soc_card_jack_new_pins(card, "DP/HDMI 0",
+					 SND_JACK_LINEOUT, &priv->jack0,
+					 dp0_pins, ARRAY_SIZE(dp0_pins));
+	if (ret) {
+		dev_err(card->dev, "Jack creation failed %d\n", ret);
+		return ret;
+	}
+	snd_soc_component_set_jack(component, &priv->jack0, NULL);
+	return ret;
+}
+
+static int pmdk_dp1_init(struct snd_soc_pcm_runtime *runtime)
+{
+	struct snd_soc_card *card = runtime->card;
+	struct pmdk_dp_private *priv = snd_soc_card_get_drvdata(card);
+	struct snd_soc_component *component = asoc_rtd_to_codec(runtime, 0)->component;
+	int ret;
+
+	ret = snd_soc_card_jack_new_pins(card, "DP/HDMI 1",
+					 SND_JACK_LINEOUT, &priv->jack1,
+					 dp1_pins, ARRAY_SIZE(dp1_pins));
+	if (ret) {
+		dev_err(card->dev, "Jack creation failed %d\n", ret);
+		return ret;
+	}
+	snd_soc_component_set_jack(component, &priv->jack1, NULL);
+	return ret;
+}
+
+static int pmdk_dp2_init(struct snd_soc_pcm_runtime *runtime)
+{
+	struct snd_soc_card *card = runtime->card;
+	struct pmdk_dp_private *priv = snd_soc_card_get_drvdata(card);
+	struct snd_soc_component *component = asoc_rtd_to_codec(runtime, 0)->component;
+	int ret;
+
+	ret = snd_soc_card_jack_new_pins(card, "DP/HDMI 2",
+					 SND_JACK_LINEOUT, &priv->jack2,
+					 dp2_pins, ARRAY_SIZE(dp2_pins));
+	if (ret) {
+		dev_err(card->dev, "Jack creation failed %d\n", ret);
+		return ret;
+	}
+	snd_soc_component_set_jack(component, &priv->jack2, NULL);
+	return ret;
+}
+
+SND_SOC_DAILINK_DEFS(pmdk_dp0_dai,
+	DAILINK_COMP_ARRAY(COMP_CPU("phytium-i2s-dp0")),
+	DAILINK_COMP_ARRAY(COMP_CODEC("hdmi-audio-codec.1346918656", "i2s-hifi")),
+	DAILINK_COMP_ARRAY(COMP_PLATFORM("snd-soc-dummy")));
+
+SND_SOC_DAILINK_DEFS(pmdk_dp1_dai,
+	DAILINK_COMP_ARRAY(COMP_CPU("phytium-i2s-dp1")),
+	DAILINK_COMP_ARRAY(COMP_CODEC("hdmi-audio-codec.1346918657", "i2s-hifi")),
+	DAILINK_COMP_ARRAY(COMP_PLATFORM("snd-soc-dummy")));
+
+SND_SOC_DAILINK_DEFS(pmdk_dp2_dai,
+	DAILINK_COMP_ARRAY(COMP_CPU("phytium-i2s-dp2")),
+	DAILINK_COMP_ARRAY(COMP_CODEC("hdmi-audio-codec.1346918658", "i2s-hifi")),
+	DAILINK_COMP_ARRAY(COMP_PLATFORM("snd-soc-dummy")));
+
+static struct snd_soc_dai_link pmdk_dai0 = {
+	.name = "Phytium dp0-audio",
+	.stream_name = "Playback",
+	.dai_fmt = SMDK_DAI_FMT,
+	.init = pmdk_dp0_init,
+	SND_SOC_DAILINK_REG(pmdk_dp0_dai),
+};
+
+static struct snd_soc_dai_link pmdk_dai1 = {
+	.name = "Phytium dp1-audio",
+	.stream_name = "Playback",
+	.dai_fmt = SMDK_DAI_FMT,
+	.init = pmdk_dp1_init,
+	SND_SOC_DAILINK_REG(pmdk_dp1_dai),
+};
+
+static struct snd_soc_dai_link pmdk_dai2 = {
+	.name = "Phytium dp2-audio",
+	.stream_name = "Playback",
+	.dai_fmt = SMDK_DAI_FMT,
+	.init = pmdk_dp2_init,
+	SND_SOC_DAILINK_REG(pmdk_dp2_dai),
+};
+
+static struct snd_soc_card pmdk = {
+	.name = "PMDK-I2S",
+	.owner = THIS_MODULE,
+
+	.dapm_widgets = pmdk_dp_dapm_widgets,
+	.num_dapm_widgets = ARRAY_SIZE(pmdk_dp_dapm_widgets),
+	.controls = pmdk_controls,
+	.num_controls = ARRAY_SIZE(pmdk_controls),
+	.dapm_routes = pmdk_dp_audio_map,
+	.num_dapm_routes = ARRAY_SIZE(pmdk_dp_audio_map),
+};
+
+static int pmdk_sound_probe(struct platform_device *pdev)
+{
+	struct snd_soc_card *card = &pmdk;
+	struct pmdk_dp_private *priv;
+	struct snd_soc_dai_link *pmdk_dai;
+	int num_dp = 2;
+
+	card->dev = &pdev->dev;
+	device_property_read_u32(&pdev->dev, "num-dp", &num_dp);
+	pmdk_dai = devm_kzalloc(&pdev->dev, num_dp * sizeof(*pmdk_dai), GFP_KERNEL);
+	if (!pmdk_dai)
+		return -ENOMEM;
+
+	switch (num_dp) {
+	case 1:
+		pmdk_dai[0] = pmdk_dai0;
+		break;
+	case 2:
+		pmdk_dai[0] = pmdk_dai0;
+		pmdk_dai[1] = pmdk_dai1;
+		break;
+	case 3:
+		pmdk_dai[0] = pmdk_dai0;
+		pmdk_dai[1] = pmdk_dai1;
+		pmdk_dai[2] = pmdk_dai2;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	card->dai_link = pmdk_dai;
+	card->num_links = num_dp;
+
+	priv = devm_kzalloc(&pdev->dev, sizeof(*priv), GFP_KERNEL);
+	if (!priv)
+		return -ENOMEM;
+
+	snd_soc_card_set_drvdata(card, priv);
+
+	return devm_snd_soc_register_card(&pdev->dev, card);
+}
+
+static const struct acpi_device_id pmdk_sound_acpi_match[] = {
+	{ "PHYT8006", 0},
+	{ }
+};
+MODULE_DEVICE_TABLE(acpi, pmdk_sound_acpi_match);
+
+static struct platform_driver pmdk_sound_driver = {
+	.probe = pmdk_sound_probe,
+	.driver = {
+		.name = "pmdk_dp",
+		.acpi_match_table = pmdk_sound_acpi_match,
+#ifdef CONFIG_PM
+		.pm = &snd_soc_pm_ops,
+#endif
+	},
+};
+
+module_platform_driver(pmdk_sound_driver);
+
+MODULE_AUTHOR("Zhang Yiqun <zhangyiqun@phytium.com.cn>");
+MODULE_DESCRIPTION("ALSA SoC PMDK DP");
+MODULE_LICENSE("GPL");
-- 
2.47.0

