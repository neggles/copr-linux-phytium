From 3172f6877378bad3a28ed42fb4fabc2e8fa72d06 Mon Sep 17 00:00:00 2001
From: Song Wenting <songwenting@phytium.com.cn>
Date: Mon, 17 Jun 2024 19:33:09 +0800
Subject: [PATCH 108/150] net: macb: Add ACPI support for Phytium XMAC

This patch adds ACPI support to Cadence GEM driver on Phytium SoCs.

Signed-off-by: Song Wenting <songwenting@phytium.com.cn>
Signed-off-by: Chen Baozi <chenbaozi@phytium.com.cn>
Change-Id: If696438b014e26f65346d0a8d38062f5b7a470e5
Signed-off-by: Andrew Powers-Holmes <aholmes@omnom.net>
---
 drivers/net/ethernet/cadence/macb_main.c | 96 +++++++++++++++++++++++-
 1 file changed, 93 insertions(+), 3 deletions(-)

diff --git a/drivers/net/ethernet/cadence/macb_main.c b/drivers/net/ethernet/cadence/macb_main.c
index a70c4b282e7f..48d6d157bd08 100644
--- a/drivers/net/ethernet/cadence/macb_main.c
+++ b/drivers/net/ethernet/cadence/macb_main.c
@@ -6,6 +6,7 @@
  */
 
 #define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
+#include <linux/acpi.h>
 #include <linux/clk.h>
 #include <linux/clk-provider.h>
 #include <linux/crc32.h>
@@ -4906,6 +4907,54 @@ static int init_reset_optional(struct platform_device *pdev)
 	return ret;
 }
 
+#define PHYTIUM_PCLK_RATE 250000000
+#define PHYTIUM_HCLK_RATE 48000000
+
+static int phytium_clk_init(struct platform_device *pdev, struct clk **pclk,
+			    struct clk **hclk, struct clk **tx_clk,
+			    struct clk **rx_clk, struct clk **tsu_clk)
+{
+	struct macb_platform_data plat_data;
+	int err = 0;
+
+	if (has_acpi_companion(&pdev->dev)) {
+		/* set up macb platform data */
+		memset(&plat_data, 0, sizeof(plat_data));
+
+		/* initialize clocks */
+		plat_data.pclk = clk_register_fixed_rate(&pdev->dev, "pclk", NULL, 0,
+							 PHYTIUM_PCLK_RATE);
+		if (IS_ERR(plat_data.pclk)) {
+			err = PTR_ERR(plat_data.pclk);
+			goto err_pclk_register;
+		}
+
+		plat_data.hclk = clk_register_fixed_rate(&pdev->dev, "hclk", NULL, 0,
+							 PHYTIUM_HCLK_RATE);
+		if (IS_ERR(plat_data.hclk)) {
+			err = PTR_ERR(plat_data.hclk);
+			goto err_hclk_register;
+		}
+
+		err = platform_device_add_data(pdev, &plat_data, sizeof(plat_data));
+		if (err)
+			goto err_plat_dev_register;
+	}
+
+	err = macb_clk_init(pdev, pclk, hclk, tx_clk, rx_clk, tsu_clk);
+
+	return 0;
+
+err_plat_dev_register:
+	clk_unregister(plat_data.hclk);
+
+err_hclk_register:
+	clk_unregister(plat_data.pclk);
+
+err_pclk_register:
+	return err;
+}
+
 static const struct macb_usrio_config sama7g5_usrio = {
 	.mii = 0,
 	.rmii = 1,
@@ -5061,7 +5110,7 @@ static const struct macb_config phytium_config = {
 		MACB_CAPS_GEM_HAS_PTP |	MACB_CAPS_BD_RD_PREFETCH |
 		MACB_CAPS_SEL_CLK_HW,
 	.dma_burst_length = 16,
-	.clk_init = macb_clk_init,
+	.clk_init = phytium_clk_init,
 	.init = macb_init,
 	.jumbo_max_len = 10240,
 	.usrio = &macb_default_usrio,
@@ -5096,6 +5145,17 @@ static const struct of_device_id macb_dt_ids[] = {
 MODULE_DEVICE_TABLE(of, macb_dt_ids);
 #endif /* CONFIG_OF */
 
+#ifdef CONFIG_ACPI
+static const struct acpi_device_id macb_acpi_ids[] = {
+	{ .id = "PHYT0036", .driver_data = (kernel_ulong_t)&phytium_config },
+	{ }
+};
+
+MODULE_DEVICE_TABLE(acpi, macb_acpi_ids);
+#else
+#define macb_acpi_ids NULL
+#endif
+
 static const struct macb_config default_gem_config = {
 	.caps = MACB_CAPS_GIGABIT_MODE_AVAILABLE |
 		MACB_CAPS_JUMBO |
@@ -5127,6 +5187,26 @@ static void gem_ncsi_handler(struct ncsi_dev *nd)
 		   nd->link_up ? "up" : "down");
 }
 
+static int macb_get_phy_mode(struct platform_device *pdev, phy_interface_t *interface)
+{
+	const char *pm;
+	int err, i;
+
+	err = device_property_read_string(&pdev->dev, "phy-mode", &pm);
+	if (err < 0)
+		err = device_property_read_string(&pdev->dev, "phy-connection-type", &pm);
+	if (err < 0)
+		return err;
+
+	for (i = 0; i < PHY_INTERFACE_MODE_MAX; i++)
+		if (!strcasecmp(pm, phy_modes(i))) {
+			*interface = i;
+			return 0;
+		}
+
+	return -ENODEV;
+}
+
 static int macb_probe(struct platform_device *pdev)
 {
 	const struct macb_config *macb_config = &default_gem_config;
@@ -5160,6 +5240,15 @@ static int macb_probe(struct platform_device *pdev)
 			clk_init = macb_config->clk_init;
 			init = macb_config->init;
 		}
+	} else if (has_acpi_companion(&pdev->dev)) {
+		const struct acpi_device_id *match;
+
+		match = acpi_match_device(macb_acpi_ids, &pdev->dev);
+		if (match && match->driver_data) {
+			macb_config = (void *)match->driver_data;
+			clk_init = macb_config->clk_init;
+			init = macb_config->init;
+		}
 	}
 
 	err = clk_init(pdev, &pclk, &hclk, &tx_clk, &rx_clk, &tsu_clk);
@@ -5216,7 +5305,7 @@ static int macb_probe(struct platform_device *pdev)
 		bp->max_tx_length = GEM_MAX_TX_LEN;
 
 	bp->wol = 0;
-	if (of_property_read_bool(np, "magic-packet"))
+	if (device_property_read_bool(&pdev->dev, "magic-packet"))
 		bp->wol |= MACB_WOL_HAS_MAGIC_PACKET;
 	device_set_wakeup_capable(&pdev->dev, bp->wol & MACB_WOL_HAS_MAGIC_PACKET);
 
@@ -5289,7 +5378,7 @@ static int macb_probe(struct platform_device *pdev)
 	else if (err)
 		macb_get_hwaddr(bp);
 
-	err = of_get_phy_mode(np, &interface);
+	err = macb_get_phy_mode(pdev, &interface);
 	if (err)
 		/* not found in DT, MII by default */
 		bp->phy_interface = PHY_INTERFACE_MODE_MII;
@@ -5609,6 +5698,7 @@ static struct platform_driver macb_driver = {
 	.driver		= {
 		.name		= "macb",
 		.of_match_table	= of_match_ptr(macb_dt_ids),
+		.acpi_match_table = macb_acpi_ids,
 		.pm	= &macb_pm_ops,
 	},
 };
-- 
2.47.0

